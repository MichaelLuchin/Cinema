#include <iostream>
#include <fstream>
#include <chrono>
#include <thread>
#include <string>
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <mmsystem.h>
#include <sstream>
#pragma comment(lib, "winmm.lib")

using std::cout; using std::cerr;
using std::endl; using std::string;
using std::ifstream; using std::ostringstream;

string readFileIntoString(const string& path) {
    ifstream input_file(path);
    if (!input_file.is_open()) {
        cerr << "Could not open the file - '"
            << path << "'" << endl;
        exit(EXIT_FAILURE);
    }
    return string((std::istreambuf_iterator<char>(input_file)), std::istreambuf_iterator<char>());
}

void setCursorPosition(int x, int y) {
    static const HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
    std::cout.flush();
    COORD coord = { (SHORT)x, (SHORT)y };
    SetConsoleCursorPosition(hOut, coord);
}

void draw(int frame) {
    setCursorPosition(0, 0);
    std::string m = readFileIntoString("C:/texts1/frame" + std::to_string(frame) + ".txt");
    std::cout << m;
}

void Roll() {

    HWND console = GetConsoleWindow();
    MoveWindow(console, 0, 0, 20000, 20000, TRUE);
    draw(1);
    system("cls");
    for (int i = 0; i < 20; i++)
    {
        auto start = std::chrono::steady_clock::now();
        auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - start);
        while (elapsed.count() < 2120) {
            elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - start);
            draw(elapsed.count() / 40);
            std::this_thread::sleep_for(std::chrono::milliseconds(10));
        }
    }
}

int main() {
    Roll();
}
